
CREATE TABLE ASSAY
(
  ASSAY_PK_ID       NUMBER                      NOT NULL,
  ASSAY_NAME        VARCHAR2(200),
  DESCRIPTION       VARCHAR2(4000),
  ASSAY_TYPE        VARCHAR2(200),
  CREATED_DATE      DATE,
  CREATED_BY        VARCHAR2(200),
  ASSAY_TYPE_PK_ID  NUMBER,
  PROTOCOL_PK_ID    NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE ASSAY_TYPE
(
  ASSAY_TYPE_PK_ID  NUMBER                      NOT NULL,
  ASSAY_TYPE_NAME   VARCHAR2(200),
  DESCRIPTION       VARCHAR2(4000),
  EXECUTE_ORDER     VARCHAR2(10)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CONTACT
(
  CONTACT_PK_ID  NUMBER(38)                     NOT NULL,
  FIRST_NAME     VARCHAR2(100)                  NOT NULL,
  LAST_NAME      VARCHAR2(100)                  NOT NULL,
  TITLE          VARCHAR2(100),
  PHONE_NUMBER   VARCHAR2(15),
  EMAIL          VARCHAR2(100),
  UPDATE_DATE    DATE                           NOT NULL,
  MIDDLE_NAME    VARCHAR2(100),
  FAX            VARCHAR2(20),
  ADDRESS        VARCHAR2(200),
  CITY           VARCHAR2(100),
  STATE          VARCHAR2(100),
  COUNTRY        VARCHAR2(100),
  POSTAL_CODE    VARCHAR2(10),
  PI_NAME        VARCHAR2(200)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CONTAINER_STORAGE_LOCATION
(
  SAMPLE_CONTAINER_PK_ID  NUMBER                NOT NULL,
  STORAGE_PK_ID           NUMBER                NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_APPLICATION
(
  APPLICATION_ID           NUMBER(38)           NOT NULL,
  APPLICATION_NAME         VARCHAR2(100)        NOT NULL,
  APPLICATION_DESCRIPTION  VARCHAR2(200)        NOT NULL,
  DECLARATIVE_FLAG         NUMBER(1),
  ACTIVE_FLAG              NUMBER(1)            NOT NULL,
  UPDATE_DATE              DATE                 NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_GROUP
(
  GROUP_ID        NUMBER(38)                    NOT NULL,
  GROUP_NAME      VARCHAR2(100)                 NOT NULL,
  GROUP_DESC      VARCHAR2(200),
  UPDATE_DATE     DATE                          NOT NULL,
  APPLICATION_ID  NUMBER(38)                    NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_PG_PE
(
  PG_PE_ID               NUMBER(38)             NOT NULL,
  PROTECTION_GROUP_ID    NUMBER(38)             NOT NULL,
  PROTECTION_ELEMENT_ID  NUMBER(38)             NOT NULL,
  UPDATE_DATE            DATE                   NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_PRIVILEGE
(
  PRIVILEGE_ID           NUMBER(38)             NOT NULL,
  PRIVILEGE_NAME         VARCHAR2(100)          NOT NULL,
  PRIVILEGE_DESCRIPTION  VARCHAR2(200),
  UPDATE_DATE            DATE                   NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_PROTECTION_ELEMENT
(
  PROTECTION_ELEMENT_ID           NUMBER(38)    NOT NULL,
  PROTECTION_ELEMENT_NAME         VARCHAR2(100) NOT NULL,
  PROTECTION_ELEMENT_DESCRIPTION  VARCHAR2(200),
  OBJECT_ID                       VARCHAR2(100) NOT NULL,
  ATTRIBUTE                       VARCHAR2(100),
  PROTECTION_ELEMENT_TYPE_ID      NUMBER(10),
  APPLICATION_ID                  NUMBER(38)    NOT NULL,
  UPDATE_DATE                     DATE          NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_PROTECTION_GROUP
(
  PROTECTION_GROUP_ID           NUMBER(38)      NOT NULL,
  PROTECTION_GROUP_NAME         VARCHAR2(100)   NOT NULL,
  PROTECTION_GROUP_DESCRIPTION  VARCHAR2(200),
  APPLICATION_ID                NUMBER(38)      NOT NULL,
  LARGE_ELEMENT_COUNT_FLAG      NUMBER(1)       NOT NULL,
  UPDATE_DATE                   DATE            NOT NULL,
  PARENT_PROTECTION_GROUP_ID    NUMBER(38)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_ROLE
(
  ROLE_ID           NUMBER(38)                  NOT NULL,
  ROLE_NAME         VARCHAR2(100)               NOT NULL,
  ROLE_DESCRIPTION  VARCHAR2(200),
  APPLICATION_ID    NUMBER(38)                  NOT NULL,
  ACTIVE_FLAG       NUMBER(1)                   NOT NULL,
  UPDATE_DATE       DATE                        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_ROLE_PRIVILEGE
(
  ROLE_PRIVILEGE_ID  NUMBER(38)                 NOT NULL,
  ROLE_ID            NUMBER(38)                 NOT NULL,
  PRIVILEGE_ID       NUMBER(38)                 NOT NULL,
  UPDATE_DATE        DATE                       NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_USER
(
  USER_ID       NUMBER(38)                      NOT NULL,
  LOGIN_NAME    VARCHAR2(100)                   NOT NULL,
  FIRST_NAME    VARCHAR2(100)                   NOT NULL,
  LAST_NAME     VARCHAR2(100)                   NOT NULL,
  ORGANIZATION  VARCHAR2(100),
  DEPARTMENT    VARCHAR2(100),
  TITLE         VARCHAR2(100),
  PHONE_NUMBER  VARCHAR2(15),
  PASSWORD      VARCHAR2(100),
  EMAIL_ID      VARCHAR2(100),
  START_DATE    DATE,
  END_DATE      DATE,
  UPDATE_DATE   DATE                            NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_USER_GROUP
(
  USER_GROUP_ID  NUMBER(38)                     NOT NULL,
  USER_ID        NUMBER(38)                     NOT NULL,
  GROUP_ID       NUMBER(38)                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_USER_GROUP_ROLE_PG
(
  USER_GROUP_ROLE_PG_ID  NUMBER(38)             NOT NULL,
  USER_ID                NUMBER(38),
  GROUP_ID               NUMBER(38),
  ROLE_ID                NUMBER(38)             NOT NULL,
  PROTECTION_GROUP_ID    NUMBER(38)             NOT NULL,
  UPDATE_DATE            DATE                   NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE CSM_USER_PE
(
  USER_PROTECTION_ELEMENT_ID  NUMBER(38)        NOT NULL,
  PROTECTION_ELEMENT_ID       NUMBER(38)        NOT NULL,
  USER_ID                     NUMBER(38)        NOT NULL,
  UPDATE_DATE                 DATE              NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE DATA_STATUS
(
  DATA_STATUS_PK_ID  NUMBER                     NOT NULL,
  STATUS             VARCHAR2(20),
  REASON             VARCHAR2(2000)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE DERIVED_SAMPLE_CONTAINER
(
  PARENT_CONTAINER_ID     NUMBER                NOT NULL,
  SAMPLE_CONTAINER_PK_ID  NUMBER                NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE HIBERNATE_UNIQUE_KEY
(
  NEXT_HI  NUMBER                               NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE LAB_FILE
(
  FILE_PK_ID           NUMBER                   NOT NULL,
  FILE_NAME            VARCHAR2(500),
  FILE_URI             VARCHAR2(500),
  FILE_TYPE_EXTENSION  VARCHAR2(100),
  FILE_SOURCE_TYPE     VARCHAR2(100),
  VERSION              VARCHAR2(200),
  STATUS               VARCHAR2(20),
  REASON               VARCHAR2(2000),
  CREATED_BY           VARCHAR2(200),
  CREATED_DATE         DATE,
  SAMPLE_SOP_PK_ID     NUMBER,
  RUN_PK_ID            NUMBER,
  PROTOCOL_PK_ID       NUMBER,
  DATA_STATUS_PK_ID    NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE MEASURE_UNIT
(
  MEASURE_UNIT_PK_ID  NUMBER                    NOT NULL,
  UNIT_NAME           VARCHAR2(50),
  DESCRIPTION         VARCHAR2(1000),
  UNIT_TYPE           VARCHAR2(100)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE PROJECT
(
  PROJECT_PK_ID  NUMBER                         NOT NULL,
  PROJECT_NAME   VARCHAR2(200),
  DESCRIPTION    VARCHAR2(4000)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE PROJECT_SAMPLE
(
  SAMPLE_PK_ID   NUMBER                         NOT NULL,
  PROJECT_PK_ID  NUMBER                         NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE PROTOCOL
(
  PROTOCOL_PK_ID  NUMBER                        NOT NULL,
  DESCRIPTION     VARCHAR2(2000),
  PROTOCOL_NAME   VARCHAR2(200)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE RUN
(
  RUN_PK_ID     NUMBER                          NOT NULL,
  RUN_NAME      VARCHAR2(500),
  DESCRIPTION   VARCHAR2(4000),
  CREATED_BY    VARCHAR2(200),
  CREATED_DATE  DATE,
  ASSAY_PK_ID   NUMBER,
  RUN_BY        VARCHAR2(200),
  RUN_DATE      DATE
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE RUN_INPUT_FILE
(
  INPUT_FILE_PK_ID   NUMBER,
  RUN_PK_ID          NUMBER,
  DATA_STATUS_PK_ID  NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE RUN_OUTPUT_FILE
(
  OUTPUT_FILE_PK_ID  NUMBER,
  RUN_PK_ID          NUMBER,
  DATA_STATUS_PK_ID  NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE RUN_SAMPLE_CONTAINER
(
  COMMENTS                    VARCHAR2(4000),
  RUN_SAMPLE_CONTAINER_PK_ID  NUMBER            NOT NULL,
  CREATED_BY                  VARCHAR2(200),
  CREATED_DATE                DATE,
  RUN_PK_ID                   NUMBER,
  SAMPLE_CONTAINER_PK_ID      NUMBER,
  STATUS                      VARCHAR2(20),
  REASON                      VARCHAR2(2000),
  DATA_STATUS_PK_ID           NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE SAMPLE
(
  SAMPLE_PK_ID            NUMBER                NOT NULL,
  SAMPLE_SEQUENCE_ID      NUMBER,
  SAMPLE_TYPE             VARCHAR2(100),
  DESCRIPTION             VARCHAR2(4000),
  SOURCE_SAMPLE_ID        VARCHAR2(100),
  SOLUBILITY_DESCRIPTION  VARCHAR2(4000),
  LOT_ID                  VARCHAR2(100),
  LOT_DESCRIPTION         VARCHAR2(4000),
  NUMBER_OF_CONTAINERS    NUMBER,
  GENERAL_COMMENTS        VARCHAR2(4000),
  RECEIVED_DATE           DATE,
  CREATED_BY              VARCHAR2(200),
  CREATED_DATE            DATE,
  SOURCE_PK_ID            NUMBER,
  RECEIVED_BY             VARCHAR2(200),
  SAMPLE_NAME             VARCHAR2(200),
  SAMPLE_SOP_PK_ID        NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE SAMPLE_CONTAINER
(
  SAMPLE_CONTAINER_PK_ID  NUMBER                NOT NULL,
  QUANTITY                NUMBER,
  CONCENTRATION           NUMBER,
  VOLUME                  NUMBER,
  DILUENTS_SOLVENT        VARCHAR2(500),
  SAFETY_PRECAUTIONS      VARCHAR2(4000),
  STORAGE_CONDITIONS      VARCHAR2(1000),
  COMMENTS                VARCHAR2(4000),
  QUANTITY_UNIT           VARCHAR2(100),
  CONCENTRATION_UNIT      VARCHAR2(100),
  VOLUME_UNIT             VARCHAR2(100),
  BARCODE                 VARCHAR2(50),
  CONTAINER_TYPE          VARCHAR2(200),
  SAMPLE_PK_ID            NUMBER,
  IS_DERIVED              VARCHAR2(20),
  CREATED_METHOD          VARCHAR2(500),
  REASON                  VARCHAR2(2000),
  STATUS                  VARCHAR2(20),
  STORAGE_PK_ID           NUMBER,
  CREATED_DATE            DATE,
  CREATED_BY              VARCHAR2(200),
  NAME                    VARCHAR2(200),
  DATA_STATUS_PK_ID       NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE SAMPLE_SOP
(
  SAMPLE_SOP_PK_ID  NUMBER                      NOT NULL,
  DESCRIPTION       VARCHAR2(2000),
  SOP_NAME          VARCHAR2(200)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE SAMPLE_TYPE
(
  SAMPLE_TYPE_PK_ID  NUMBER                     NOT NULL,
  SAMPLE_TYPE_NAME   VARCHAR2(200)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE SOURCE
(
  SOURCE_PK_ID       NUMBER                     NOT NULL,
  ORGANIZATION_NAME  VARCHAR2(200),
  ADDRESS            VARCHAR2(200),
  CITY               VARCHAR2(100),
  STATE              VARCHAR2(100),
  COUNTRY            VARCHAR2(100),
  POSTAL_CODE        VARCHAR2(10)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE SOURCE_CONTACT
(
  CONTACT_PK_ID  NUMBER(38)                     NOT NULL,
  SOURCE_PK_ID   NUMBER                         NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE STORAGE
(
  STORAGE_PK_ID     NUMBER                      NOT NULL,
  STORAGE_LOCATION  VARCHAR2(500),
  STORAGE_TYPE_ID   NUMBER,
  STORAGE_TYPE      VARCHAR2(200)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE TABLE STORAGE_TYPE
(
  STORAGE_TYPE_ID  NUMBER                       NOT NULL,
  STORAGE_TYPE     VARCHAR2(200)
)
LOGGING 
NOCACHE
NOPARALLEL;


CREATE UNIQUE INDEX PK_APPLICATION ON CSM_APPLICATION
(APPLICATION_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_GROUP ON CSM_GROUP
(GROUP_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_PG_PE ON CSM_PG_PE
(PG_PE_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_PRIVILEGE ON CSM_PRIVILEGE
(PRIVILEGE_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_PROTECTION_ELEMENT ON CSM_PROTECTION_ELEMENT
(PROTECTION_ELEMENT_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_PROTECTION_GROUP ON CSM_PROTECTION_GROUP
(PROTECTION_GROUP_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_ROLE ON CSM_ROLE
(ROLE_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_ROLE_PRIVILEGE ON CSM_ROLE_PRIVILEGE
(ROLE_PRIVILEGE_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_USER ON CSM_USER
(USER_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_USER_GROUP ON CSM_USER_GROUP
(USER_GROUP_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_USER_GROUP_ROLE_PG ON CSM_USER_GROUP_ROLE_PG
(USER_GROUP_ROLE_PG_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_USER_PROTECTION_ELEMENT ON CSM_USER_PE
(USER_PROTECTION_ELEMENT_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UNIQUE_NAME ON SOURCE
(ORGANIZATION_NAME)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_APPLICATION_NAME ON CSM_APPLICATION
(APPLICATION_NAME)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_GROUP_GROUP_NAME ON CSM_GROUP
(APPLICATION_ID, GROUP_NAME)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_LOGIN_NAME ON CSM_USER
(LOGIN_NAME)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_PE_OBJ_ATT_APP_ID ON CSM_PROTECTION_ELEMENT
(OBJECT_ID, ATTRIBUTE, APPLICATION_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_PG_PE_PG_PE_ID ON CSM_PG_PE
(PROTECTION_ELEMENT_ID, PROTECTION_GROUP_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_PG_PG_NAME ON CSM_PROTECTION_GROUP
(APPLICATION_ID, PROTECTION_GROUP_NAME)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_PRIVILEGE_NAME ON CSM_PRIVILEGE
(PRIVILEGE_NAME)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_ROLE_ID_PRIVILEGE_ID ON CSM_ROLE_PRIVILEGE
(PRIVILEGE_ID, ROLE_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_ROLE_ROLE_NAME ON CSM_ROLE
(APPLICATION_ID, ROLE_NAME)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX UQ_USER_PE_PE_ID ON CSM_USER_PE
(USER_ID, PROTECTION_ELEMENT_ID)
LOGGING
NOPARALLEL;


ALTER TABLE ASSAY ADD (
  PRIMARY KEY (ASSAY_PK_ID));


ALTER TABLE ASSAY_TYPE ADD (
  PRIMARY KEY (ASSAY_TYPE_PK_ID));


ALTER TABLE CONTACT ADD (
  PRIMARY KEY (CONTACT_PK_ID));


ALTER TABLE CSM_APPLICATION ADD (
  CONSTRAINT PK_APPLICATION PRIMARY KEY (APPLICATION_ID));


ALTER TABLE CSM_GROUP ADD (
  CONSTRAINT PK_GROUP PRIMARY KEY (GROUP_ID));


ALTER TABLE CSM_PG_PE ADD (
  CONSTRAINT PK_PG_PE PRIMARY KEY (PG_PE_ID));


ALTER TABLE CSM_PRIVILEGE ADD (
  CONSTRAINT PK_PRIVILEGE PRIMARY KEY (PRIVILEGE_ID));


ALTER TABLE CSM_PROTECTION_ELEMENT ADD (
  CONSTRAINT PK_PROTECTION_ELEMENT PRIMARY KEY (PROTECTION_ELEMENT_ID));


ALTER TABLE CSM_PROTECTION_GROUP ADD (
  CONSTRAINT PK_PROTECTION_GROUP PRIMARY KEY (PROTECTION_GROUP_ID));


ALTER TABLE CSM_ROLE ADD (
  CONSTRAINT PK_ROLE PRIMARY KEY (ROLE_ID));


ALTER TABLE CSM_ROLE_PRIVILEGE ADD (
  CONSTRAINT PK_ROLE_PRIVILEGE PRIMARY KEY (ROLE_PRIVILEGE_ID));


ALTER TABLE CSM_USER ADD (
  CONSTRAINT PK_USER PRIMARY KEY (USER_ID));


ALTER TABLE CSM_USER_GROUP ADD (
  CONSTRAINT PK_USER_GROUP PRIMARY KEY (USER_GROUP_ID));


ALTER TABLE CSM_USER_GROUP_ROLE_PG ADD (
  CONSTRAINT PK_USER_GROUP_ROLE_PG PRIMARY KEY (USER_GROUP_ROLE_PG_ID));


ALTER TABLE CSM_USER_PE ADD (
  CONSTRAINT PK_USER_PROTECTION_ELEMENT PRIMARY KEY (USER_PROTECTION_ELEMENT_ID));


ALTER TABLE DATA_STATUS ADD (
  PRIMARY KEY (DATA_STATUS_PK_ID));


ALTER TABLE DERIVED_SAMPLE_CONTAINER ADD (
  PRIMARY KEY (PARENT_CONTAINER_ID, SAMPLE_CONTAINER_PK_ID));


ALTER TABLE LAB_FILE ADD (
  PRIMARY KEY (FILE_PK_ID));


ALTER TABLE MEASURE_UNIT ADD (
  PRIMARY KEY (MEASURE_UNIT_PK_ID));


ALTER TABLE PROJECT ADD (
  PRIMARY KEY (PROJECT_PK_ID));


ALTER TABLE PROJECT_SAMPLE ADD (
  PRIMARY KEY (SAMPLE_PK_ID, PROJECT_PK_ID));


ALTER TABLE PROTOCOL ADD (
  PRIMARY KEY (PROTOCOL_PK_ID));


ALTER TABLE RUN ADD (
  PRIMARY KEY (RUN_PK_ID));


ALTER TABLE RUN_SAMPLE_CONTAINER ADD (
  PRIMARY KEY (RUN_SAMPLE_CONTAINER_PK_ID));


ALTER TABLE SAMPLE ADD (
  PRIMARY KEY (SAMPLE_PK_ID));


ALTER TABLE SAMPLE_CONTAINER ADD (
  PRIMARY KEY (SAMPLE_CONTAINER_PK_ID));


ALTER TABLE SAMPLE_SOP ADD (
  PRIMARY KEY (SAMPLE_SOP_PK_ID));


ALTER TABLE SAMPLE_TYPE ADD (
  PRIMARY KEY (SAMPLE_TYPE_PK_ID));


ALTER TABLE SOURCE ADD (
  PRIMARY KEY (SOURCE_PK_ID));


ALTER TABLE SOURCE_CONTACT ADD (
  PRIMARY KEY (CONTACT_PK_ID, SOURCE_PK_ID));


ALTER TABLE STORAGE ADD (
  PRIMARY KEY (STORAGE_PK_ID));


ALTER TABLE STORAGE_TYPE ADD (
  PRIMARY KEY (STORAGE_TYPE_ID));


ALTER TABLE ASSAY ADD (
  FOREIGN KEY (PROTOCOL_PK_ID) 
    REFERENCES PROTOCOL (PROTOCOL_PK_ID));

ALTER TABLE ASSAY ADD (
  FOREIGN KEY (ASSAY_TYPE_PK_ID) 
    REFERENCES ASSAY_TYPE (ASSAY_TYPE_PK_ID));


ALTER TABLE CONTAINER_STORAGE_LOCATION ADD (
  FOREIGN KEY (SAMPLE_CONTAINER_PK_ID) 
    REFERENCES SAMPLE_CONTAINER (SAMPLE_CONTAINER_PK_ID));

ALTER TABLE CONTAINER_STORAGE_LOCATION ADD (
  FOREIGN KEY (STORAGE_PK_ID) 
    REFERENCES STORAGE (STORAGE_PK_ID));


ALTER TABLE CSM_GROUP ADD (
  CONSTRAINT FK_CSM_GROUP_CSM_APPLICATION FOREIGN KEY (APPLICATION_ID) 
    REFERENCES CSM_APPLICATION (APPLICATION_ID)
    ON DELETE CASCADE);


ALTER TABLE CSM_PG_PE ADD (
  CONSTRAINT FK_PG_PE_PE FOREIGN KEY (PROTECTION_ELEMENT_ID) 
    REFERENCES CSM_PROTECTION_ELEMENT (PROTECTION_ELEMENT_ID)
    ON DELETE CASCADE);

ALTER TABLE CSM_PG_PE ADD (
  CONSTRAINT FK_PG_PE_PG FOREIGN KEY (PROTECTION_GROUP_ID) 
    REFERENCES CSM_PROTECTION_GROUP (PROTECTION_GROUP_ID)
    ON DELETE CASCADE);


ALTER TABLE CSM_PROTECTION_ELEMENT ADD (
  CONSTRAINT FK_PE_APPLICATION FOREIGN KEY (APPLICATION_ID) 
    REFERENCES CSM_APPLICATION (APPLICATION_ID)
    ON DELETE CASCADE);


ALTER TABLE CSM_PROTECTION_GROUP ADD (
  CONSTRAINT FK_PG_APPLICATION FOREIGN KEY (APPLICATION_ID) 
    REFERENCES CSM_APPLICATION (APPLICATION_ID)
    ON DELETE CASCADE);

ALTER TABLE CSM_PROTECTION_GROUP ADD (
  CONSTRAINT FK_PG_PG FOREIGN KEY (PARENT_PROTECTION_GROUP_ID) 
    REFERENCES CSM_PROTECTION_GROUP (PROTECTION_GROUP_ID));


ALTER TABLE CSM_ROLE ADD (
  CONSTRAINT FK_ROLE_APPLICATION FOREIGN KEY (APPLICATION_ID) 
    REFERENCES CSM_APPLICATION (APPLICATION_ID)
    ON DELETE CASCADE);


ALTER TABLE CSM_ROLE_PRIVILEGE ADD (
  CONSTRAINT FK_ROLE_PRIVILEGE_PRIVILEGE FOREIGN KEY (PRIVILEGE_ID) 
    REFERENCES CSM_PRIVILEGE (PRIVILEGE_ID)
    ON DELETE CASCADE);

ALTER TABLE CSM_ROLE_PRIVILEGE ADD (
  CONSTRAINT FK_ROLE_PRIVILEGE_ROLE FOREIGN KEY (ROLE_ID) 
    REFERENCES CSM_ROLE (ROLE_ID)
    ON DELETE CASCADE);


ALTER TABLE CSM_USER_GROUP ADD (
  CONSTRAINT FK_USER_GROUP_GROUP FOREIGN KEY (GROUP_ID) 
    REFERENCES CSM_GROUP (GROUP_ID)
    ON DELETE CASCADE);

ALTER TABLE CSM_USER_GROUP ADD (
  CONSTRAINT FK_USER_GROUP_USER FOREIGN KEY (USER_ID) 
    REFERENCES CSM_USER (USER_ID)
    ON DELETE CASCADE);


ALTER TABLE CSM_USER_GROUP_ROLE_PG ADD (
  CONSTRAINT FK_USER_GROUP_ROLE_PG_GROUP FOREIGN KEY (GROUP_ID) 
    REFERENCES CSM_GROUP (GROUP_ID));

ALTER TABLE CSM_USER_GROUP_ROLE_PG ADD (
  CONSTRAINT FK_USER_GROUP_ROLE_PG_PG FOREIGN KEY (PROTECTION_GROUP_ID) 
    REFERENCES CSM_PROTECTION_GROUP (PROTECTION_GROUP_ID)
    ON DELETE CASCADE);

ALTER TABLE CSM_USER_GROUP_ROLE_PG ADD (
  CONSTRAINT FK_USER_GROUP_ROLE_PG_ROLE FOREIGN KEY (ROLE_ID) 
    REFERENCES CSM_ROLE (ROLE_ID)
    ON DELETE CASCADE);

ALTER TABLE CSM_USER_GROUP_ROLE_PG ADD (
  CONSTRAINT FK_USER_GROUP_ROLE_PG_USER FOREIGN KEY (USER_ID) 
    REFERENCES CSM_USER (USER_ID)
    ON DELETE CASCADE);


ALTER TABLE CSM_USER_PE ADD (
  CONSTRAINT FK_USER_PE_PE FOREIGN KEY (PROTECTION_ELEMENT_ID) 
    REFERENCES CSM_PROTECTION_ELEMENT (PROTECTION_ELEMENT_ID)
    ON DELETE CASCADE);

ALTER TABLE CSM_USER_PE ADD (
  CONSTRAINT FK_USER_PE_USER FOREIGN KEY (USER_ID) 
    REFERENCES CSM_USER (USER_ID)
    ON DELETE CASCADE);


ALTER TABLE DERIVED_SAMPLE_CONTAINER ADD (
  FOREIGN KEY (SAMPLE_CONTAINER_PK_ID) 
    REFERENCES SAMPLE_CONTAINER (SAMPLE_CONTAINER_PK_ID));

ALTER TABLE DERIVED_SAMPLE_CONTAINER ADD (
  FOREIGN KEY (PARENT_CONTAINER_ID) 
    REFERENCES SAMPLE_CONTAINER (SAMPLE_CONTAINER_PK_ID));


ALTER TABLE LAB_FILE ADD (
  FOREIGN KEY (PROTOCOL_PK_ID) 
    REFERENCES PROTOCOL (PROTOCOL_PK_ID));

ALTER TABLE LAB_FILE ADD (
  FOREIGN KEY (RUN_PK_ID) 
    REFERENCES RUN (RUN_PK_ID));

ALTER TABLE LAB_FILE ADD (
  FOREIGN KEY (SAMPLE_SOP_PK_ID) 
    REFERENCES SAMPLE_SOP (SAMPLE_SOP_PK_ID));

ALTER TABLE LAB_FILE ADD (
  FOREIGN KEY (DATA_STATUS_PK_ID) 
    REFERENCES DATA_STATUS (DATA_STATUS_PK_ID));


ALTER TABLE PROJECT_SAMPLE ADD (
  FOREIGN KEY (PROJECT_PK_ID) 
    REFERENCES PROJECT (PROJECT_PK_ID));

ALTER TABLE PROJECT_SAMPLE ADD (
  FOREIGN KEY (SAMPLE_PK_ID) 
    REFERENCES SAMPLE (SAMPLE_PK_ID));


ALTER TABLE RUN ADD (
  FOREIGN KEY (ASSAY_PK_ID) 
    REFERENCES ASSAY (ASSAY_PK_ID));


ALTER TABLE RUN_SAMPLE_CONTAINER ADD (
  FOREIGN KEY (SAMPLE_CONTAINER_PK_ID) 
    REFERENCES SAMPLE_CONTAINER (SAMPLE_CONTAINER_PK_ID));

ALTER TABLE RUN_SAMPLE_CONTAINER ADD (
  FOREIGN KEY (RUN_PK_ID) 
    REFERENCES RUN (RUN_PK_ID));

ALTER TABLE RUN_SAMPLE_CONTAINER ADD (
  FOREIGN KEY (DATA_STATUS_PK_ID) 
    REFERENCES DATA_STATUS (DATA_STATUS_PK_ID));


ALTER TABLE SAMPLE ADD (
  FOREIGN KEY (SAMPLE_SOP_PK_ID) 
    REFERENCES SAMPLE_SOP (SAMPLE_SOP_PK_ID));

ALTER TABLE SAMPLE ADD (
  FOREIGN KEY (SOURCE_PK_ID) 
    REFERENCES SOURCE (SOURCE_PK_ID));


ALTER TABLE SAMPLE_CONTAINER ADD (
  FOREIGN KEY (STORAGE_PK_ID) 
    REFERENCES STORAGE (STORAGE_PK_ID));

ALTER TABLE SAMPLE_CONTAINER ADD (
  FOREIGN KEY (SAMPLE_PK_ID) 
    REFERENCES SAMPLE (SAMPLE_PK_ID));

ALTER TABLE SAMPLE_CONTAINER ADD (
  FOREIGN KEY (DATA_STATUS_PK_ID) 
    REFERENCES DATA_STATUS (DATA_STATUS_PK_ID));


ALTER TABLE SOURCE_CONTACT ADD (
  FOREIGN KEY (SOURCE_PK_ID) 
    REFERENCES SOURCE (SOURCE_PK_ID));

ALTER TABLE SOURCE_CONTACT ADD (
  FOREIGN KEY (CONTACT_PK_ID) 
    REFERENCES CONTACT (CONTACT_PK_ID));


ALTER TABLE STORAGE ADD (
  FOREIGN KEY (STORAGE_TYPE_ID) 
    REFERENCES STORAGE_TYPE (STORAGE_TYPE_ID));


-- script for view --
CREATE OR REPLACE FORCE VIEW VIEW_SAMPLE_SOP_FILE
(SOP_FILE_PK_ID, FILE_NAME, FILE_TYPE_EXTENSION, STATUS, REASON, 
 FILE_URI, VERSION, CREATED_BY, CREATED_DATE, SAMPLE_SOP_PK_ID)
AS 
select FILE_PK_ID,
	FILE_NAME,
	FILE_TYPE_EXTENSION,
	STATUS,
	REASON,
	FILE_URI,
	VERSION,
	CREATED_BY,
	CREATED_DATE,
	SAMPLE_SOP_pk_ID from lab_file where File_source_type = 'SOP';


CREATE OR REPLACE FORCE VIEW VIEW_PROTOCOL_FILE
(PROTOCOL_FILE_PK_ID, FILE_NAME, FILE_TYPE_EXTENSION, STATUS, REASON, 
 FILE_URI, VERSION, CREATED_BY, CREATED_DATE, PROTOCOL_PK_ID)
AS 
select FILE_PK_ID,
	FILE_NAME,
	FILE_TYPE_EXTENSION,
	STATUS,
	REASON,
	FILE_URI,
	VERSION,
	CREATED_BY,
	CREATED_DATE,
	PROTOCOL_PK_ID from lab_file where File_source_type = 'PROTOCOL';
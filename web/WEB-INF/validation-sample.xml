<!DOCTYPE form-validation PUBLIC
"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1.3//EN"
"http://jakarta.apache.org/commons/dtds/validator_1_1_3.dtd">

<form-validation>
	<formset>
		<form name="sampleForm">
			<field property="sampleBean.domain.name" page="1" depends="required">
				<arg position="0" key="sampleForm.sampleName" bundle="sample" />
			</field>
			<field property="sampleBean.primaryPOCBean.domain.id" page="1"
				depends="validwhen">
				<arg position="0" key="sampleForm.primaryPOC" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((sampleBean.thePOC.domain.organization.name!=null) or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.organization.name"
				page="2" depends="required">
				<arg position="0" key="sampleForm.organizationName" bundle="sample" />
			</field>
		</form>
		<form name="/chemicalAssociation">
			<field property="assoc.type" page="1" depends="required">
				<arg position="0" key="chemicalAssociationType" bundle="sample" />
			</field>
			<field property="assoc.attachment.bondType" page="1" depends="validwhen">
				<arg position="0" key="chemicalAssociationBondType" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((assoc.type!='attachment') or (*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="assoc.associatedElementA.entityId" page="1"
				depends="required">
				<arg position="0" key="associatedElementA" bundle="sample" />
			</field>
			<field property="assoc.associatedElementB.entityId" page="1"
				depends="required">
				<arg position="0" key="associatedElementB" bundle="sample" />
			</field>
			<field property="assoc.associatedElementA.composingElement.id"
				page="1" depends="validwhen">
				<arg position="0" key="associatedElementAComposingElement"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((assoc.associatedElementA.compositionType!='Nanomaterial
						Entity')
						or (*this*!=0))
					</var-value>
				</var>
			</field>
			<field property="assoc.associatedElementB.composingElement.id"
				page="1" depends="validwhen">
				<arg position="0" key="associatedElementBComposingElement"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((assoc.associatedElementA.compositionType!='Nanomaterial
						Entity')
						or (*this*!=0))
					</var-value>
				</var>
			</field>
			<field property="assoc.theFile.uploadedFile" page="2" depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((assoc.theFile.domainFile.uri!=null)
						or
						((*this*!=null)
						and
						(assoc.theFile.domainFile.uriExternal=="false")))
						or
						(assoc.theFile.domainFile.uriExternal=="true"))
					</var-value>
				</var>
			</field>
			<field property="assoc.theFile.externalUrl" page="2" depends="validwhen">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) and
						(assoc.theFile.domainFile.uriExternal=="true")) or
						(assoc.theFile.domainFile.uriExternal=="false"))
					</var-value>
				</var>
			</field>
			<field property="assoc.theFile.domainFile.type" page="2"
				depends="required">
				<arg position="0" key="file.type" bundle="sample" />
			</field>
			<field property="assoc.theFile.domainFile.title" page="2"
				depends="required, mask">
				<arg position="0" key="file.title" bundle="sample" />
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>^[a-zA-Z0-9\-\_\s]*$</var-value>
				</var>
			</field>
		</form>
		<form name="/nanomaterialEntity">
			<field property="nanomaterialEntity.type" page="1" depends="required">
				<arg position="0" key="nanomaterialEntityType" bundle="sample" />
			</field>
			<field property="nanomaterialEntity.biopolymer.name" page="1"
				depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.biopolymer.name"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((nanomaterialEntity.type!='biopolymer') or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.biopolymer.type" page="1"
				depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.biopolymer.type"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((nanomaterialEntity.type!='biopolymer') or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.liposome.polymerName" page="1"
				depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.liposome.polymerName"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((nanomaterialEntity.type!='liposome') or
						((nanomaterialEntity.liposome.polymerized==0) or
						(*this*!=null)))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.emulsion.polymerName" page="1"
				depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.emulsion.polymerName"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((nanomaterialEntity.type!='emulsion') or
						((nanomaterialEntity.emulsion.polymerized==0) or
						(*this*!=null)))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.polymer.crossLinkDegree"
				page="1" depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.polymer.crossLinkDegree"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((nanomaterialEntity.type!='polymer') or
						((nanomaterialEntity.polymer.crossLinkDegree==0) or
						(*this*!=null)))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theComposingElement.domain.type"
				page="2" depends="validwhen">
				<arg position="0" key="composingElement.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((dispatch!='saveComposingElement') and
						(dispatch!='removeComposingElement')) or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theComposingElement.domain.name"
				page="2" depends="validwhen">
				<arg position="0" key="composingElement.chemicalName" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((dispatch!='saveComposingElement') and
						(dispatch!='removeComposingElement')) or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theFile.uploadedFile" page="3"
				depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((nanomaterialEntity.theFile.domainFile.uri!=null)
						or
						((*this*!=null) and
						(nanomaterialEntity.theFile.domainFile.uriExternal=="false")))
						or
						(nanomaterialEntity.theFile.domainFile.uriExternal=="true"))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theFile.externalUrl" page="3"
				depends="validwhen">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) and
						(nanomaterialEntity.theFile.domainFile.uriExternal=="true")) or
						(nanomaterialEntity.theFile.domainFile.uriExternal=="false"))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theFile.domainFile.type"
				page="3" depends="required">
				<arg position="0" key="file.type" bundle="sample" />
			</field>
			<field property="nanomaterialEntity.theFile.domainFile.title"
				page="3" depends="required, mask">
				<arg position="0" key="file.title" bundle="sample" />
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>^[a-zA-Z0-9\-\_\s]*$</var-value>
				</var>
			</field>
		</form>
		<form name="/functionalizingEntity">
			<field property="functionalizingEntity.type" page="1" depends="required">
				<arg position="0" key="functionalizingEntity.type" bundle="sample" />
			</field>
			<field property="functionalizingEntity.name" page="1" depends="required">
				<arg position="0" key="functionalizingEntity.name" bundle="sample" />
			</field>
			<field property="functionalizingEntity.theFunction.type" page="2"
				depends="validwhen">
				<arg position="0" key="function.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((dispatch!='saveFunction') and
						(dispatch!='removeFunction')) or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFile.uploadedFile"
				page="3" depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((functionalizingEntity.theFile.domainFile.uri!=null)
						or
						((*this*!=null) and
						(functionalizingEntity.theFile.domainFile.uriExternal=="false")))
						or
						(functionalizingEntity.theFile.domainFile.uriExternal=="true"))
					</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFile.externalUrl"
				page="3" depends="validwhen">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) and
						(functionalizingEntity.theFile.domainFile.uriExternal=="true")) or
						(functionalizingEntity.theFile.domainFile.uriExternal=="false"))
					</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFile.domainFile.type"
				page="3" depends="required">
				<arg position="0" key="file.type" bundle="sample" />
			</field>
			<field property="functionalizingEntity.theFile.domainFile.title"
				page="3" depends="required, mask">
				<arg position="0" key="file.title" bundle="sample" />
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>^[a-zA-Z0-9\-\_\s]*$</var-value>
				</var>
			</field>
		</form>
		<form name="/compositionFile">
			<field property="comp.theFile.uploadedFile" page="1" depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((comp.theFile.domainFile.uri!=null) or
						((*this*!=null)
						and
						(comp.theFile.domainFile.uriExternal=="false"))) or
						(comp.theFile.domainFile.uriExternal=="true"))
					</var-value>
				</var>
			</field>
			<field property="comp.theFile.externalUrl" page="1" depends="validwhen">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) and
						(comp.theFile.domainFile.uriExternal=="true")) or
						(comp.theFile.domainFile.uriExternal=="false"))
					</var-value>
				</var>
			</field>
			<field property="comp.theFile.domainFile.title" page="1"
				depends="required,mask">
				<arg position="0" key="file.title" bundle="sample" />
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>^[a-zA-Z0-9\-\_\s]*$</var-value>
				</var>
			</field>
			<field property="comp.theFile.domainFile.type" page="1"
				depends="required">
				<arg position="0" key="file.type" bundle="sample" />
			</field>
		</form>
		<form name="characterizationForm">
			<!-- 1.Mandatory properties: Char Type and Char Name -->
			<field property="achar.characterizationType" page="1" depends="required">
				<arg position="0" key="achar.characterizationType" bundle="sample" />
			</field>
			<field property="achar.characterizationName" page="1" depends="required">
				<arg position="0" key="achar.characterizationName" bundle="sample" />
			</field>
			
			<!-- 1.Mandatory properties: Shape Type required if Char Name is Shape -->
			<field property="achar.shape.type" page="1" depends="validwhen">
				<arg position="0" key="shape.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((*this*!=null) or 
						(achar.characterizationName!='Shape'))
					</var-value>
				</var>
			</field>
			
			<!-- 2.Optional properties: Technique and Instrument form -->
			<field property="achar.theExperimentConfig.domain.technique.type"
				page="2" depends="validwhen">
				<arg position="0" key="achar.technique.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((*this*!=null) or ((dispatch!='saveExperimentConfig') and
						(dispatch!='deleteExperimentConfig')))
					</var-value>
				</var>
			</field>
			
			<!-- 3.Optional properties: Finding - Upload File form -->
			<field property="achar.theFinding.theFile.uploadedFile" page="3"
				depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((dispatch!="addFile") or (
						((achar.theFinding.theFile.domainFile.uri!=null) or
						((*this*!=null)	and
						(achar.theFinding.theFile.domainFile.uriExternal=="false")))
						or
						(achar.theFinding.theFile.domainFile.uriExternal=="true")))
					</var-value>
				</var>
			</field>
			<field property="achar.theFinding.theFile.externalUrl" page="3" 
				depends="validwhen">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((dispatch!="addFile") or (
						((*this*!=null) and
						(achar.theFinding.theFile.domainFile.uriExternal=="true")) or
						(achar.theFinding.theFile.domainFile.uriExternal=="false")))
					</var-value>
				</var>
			</field>
			<field property="achar.theFinding.theFile.domainFile.type" page="3"
				depends="validwhen">
				<arg position="0" key="file.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((dispatch!="addFile") or (*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="achar.theFinding.theFile.domainFile.title" page="3"
				depends="validwhen, mask">
				<arg position="0" key="file.title" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((dispatch!="addFile") or (*this*!=null))
					</var-value>
				</var>
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>^[a-zA-Z0-9\-\_\s]*$</var-value>
				</var>
			</field>
			
			<!-- 4.Optional properties: Finding - Data Matrix form -->
			<field property="achar.theFinding.numberOfColumns" page="4"
				depends="validwhenmatch">
				<arg position="0" key="achar.theFinding.numberOfColumns" 
 					bundle="sample" /> 
				<var>
					<var-name>test</var-name>
					<var-value>
						(*this* > 0) 
					</var-value>
				</var>
			</field>
			<field property="achar.theFinding.numberOfRows" page="4"
				depends="validwhenmatch">
				<arg position="0" key="achar.theFinding.numberOfRows" 
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(*this* > 0) 
					</var-value>
				</var>
			</field>
			<field property="columnType" indexedListProperty="achar.theFinding.columnHeaders"
				page="4" depends="validwhenmatch">
				<arg position="0" key="achar.theFinding.columnHeaders.columnType" 
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((*this*!=null) and
						(achar.theFinding.columnHeaders[].columnName!=null))
					</var-value>
				</var>
			</field>
		</form>
		<form name="searchSampleForm">
			<field property="text" page="1" depends="mask">
				<arg position="0" key="text" bundle="sample" />
				<msg name="mask" key="text.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>^[a-zA-Z0-9\-\_\s\"']*$</var-value>
				</var>
			</field>
		</form>
	</formset>
</form-validation>

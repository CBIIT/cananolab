<!DOCTYPE form-validation PUBLIC
"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1.3//EN"
"http://jakarta.apache.org/commons/dtds/validator_1_1_3.dtd">

<form-validation>
	<formset>
		<form name="sampleForm">
			<field property="sampleBean.cloningSampleName" page="1"
				depends="validwhen, mask">
				<arg position="0" key="sampleBean.cloningSampleName" bundle="sample" />
				<msg name="mask" key="cloningSample.name.invalid" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((page!=1) or ((page==1) and (*this*!=null)))
					</var-value>
				</var>
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="sampleBean.domain.name" page="1" depends="required, mask">
				<arg position="0" key="sampleForm.sampleName" bundle="sample" />
				<msg name="mask" key="sample.name.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="sampleBean.primaryPOCBean.domain.id" page="2"
				depends="validwhen">
				<arg position="0" key="sampleForm.primaryPOC" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((page!=2) and (page!=4)) or (((page==2) or (page==4))
						and (*this*!=null)))
					</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.organization.name"
				page="3" depends="validwhen, mask">
				<arg position="0" key="sampleForm.organizationName" bundle="sample" />
				<msg name="mask" key="organization.name.invalid" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((page!=3) or ((page==3) and (*this*!=null)))
					</var-value>
				</var>
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.organization.streetAddress1"
				page="3" depends="mask">
				<msg name="mask" key="organization.address1.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.organization.streetAddress2"
				page="3" depends="mask">
				<msg name="mask" key="organization.address2.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.organization.city"
				page="3" depends="mask">
				<msg name="mask" key="organization.city.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${relaxedAlphabetic}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.organization.state"
				page="3" depends="mask">
				<msg name="mask" key="organization.state.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${relaxedAlphabetic}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.organization.country"
				page="3" depends="mask">
				<msg name="mask" key="organization.country.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${relaxedAlphabetic}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.organization.postalCode"
				page="3" depends="mask">
				<msg name="mask" key="postalCode.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${zip}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.role" page="3"
				depends="mask">
				<msg name="mask" key="role.name.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.firstName" page="3"
				depends="mask">
				<msg name="mask" key="firstName.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${relaxedAlphabetic}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.lastName" page="3"
				depends="mask">
				<msg name="mask" key="lastName.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${relaxedAlphabetic}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.middleInitial" page="3"
				depends="mask">
				<msg name="mask" key="middleInitial.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${relaxedAlphabetic}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.phone" page="3"
				depends="mask">
				<msg name="mask" key="phone.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${phone}</var-value>
				</var>
			</field>
			<field property="sampleBean.thePOC.domain.email" page="3"
				depends="mask">
				<msg name="mask" key="email.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${email}</var-value>
				</var>
			</field>
			<field property="sampleBean.theAccess.accessBy" page="4"
				depends="required">
				<arg position="0" key="access.accessBy" bundle="sample" />
			</field>
			<field property="sampleBean.theAccess.roleName" page="4"
				depends="required">
				<arg position="0" key="access.roleName" bundle="sample" />
			</field>
			<field property="sampleBean.theAccess.groupName" page="4"
				depends="validwhen">
				<arg position="0" key="access.groupName" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((sampleBean.theAccess.accessBy!='group') and
						(sampleBean.theAccess.accessBy!='public')) or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="sampleBean.theAccess.userBean.loginName" page="4"
				depends="validwhen">
				<arg position="0" key="access.userName" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((sampleBean.theAccess.accessBy!='user') or
						(*this*!=null))
					</var-value>
				</var>
			</field>
		</form>
		<form name="/chemicalAssociation">
			<field property="assoc.type" page="1" depends="required,mask">
				<arg position="0" key="chemicalAssociationType" bundle="sample" />
				<msg name="mask" key="chemicalAssociation.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="assoc.attachment.bondType" page="1"
				depends="validwhen, mask">
				<arg position="0" key="chemicalAssociationBondType" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((assoc.type!='attachment') or (*this*!=null))
					</var-value>
				</var>
				<msg name="mask" key="chemicalAssociation.bondType.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="assoc.associatedElementA.entityId" page="1"
				depends="required">
				<arg position="0" key="associatedElementA" bundle="sample" />
			</field>
			<field property="assoc.associatedElementB.entityId" page="1"
				depends="required">
				<arg position="0" key="associatedElementB" bundle="sample" />
			</field>
			<field property="assoc.associatedElementA.composingElement.id"
				page="1" depends="validwhen">
				<arg position="0" key="associatedElementAComposingElement"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((assoc.associatedElementA.compositionType!='Nanomaterial
						Entity')
						or (*this*!=0))
					</var-value>
				</var>
			</field>
			<field property="assoc.associatedElementB.composingElement.id"
				page="1" depends="validwhen">
				<arg position="0" key="associatedElementBComposingElement"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((assoc.associatedElementA.compositionType!='Nanomaterial
						Entity')
						or (*this*!=0))
					</var-value>
				</var>
			</field>
			<field property="assoc.theFile.uploadedFile" page="3" depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((assoc.theFile.domainFile.uri!=null)
						or
						((*this*!=null)
						and
						(assoc.theFile.domainFile.uriExternal=="false")))
						or
						(assoc.theFile.domainFile.uriExternal=="true"))
					</var-value>
				</var>
			</field>
			<field property="assoc.theFile.externalUrl" page="3"
				depends="validwhen, mask">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) and
						(assoc.theFile.domainFile.uriExternal=="true")) or
						(assoc.theFile.domainFile.uriExternal=="false"))
					</var-value>
				</var>
				<msg name="mask" key="externalUrl.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${url}</var-value>
				</var>
			</field>
			<field property="assoc.theFile.domainFile.type" page="3"
				depends="required,mask">
				<arg position="0" key="file.type" bundle="sample" />
				<msg name="mask" key="file.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="assoc.theFile.domainFile.title" page="3"
				depends="required, mask">
				<arg position="0" key="file.title" bundle="sample" />
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="assoc.theFile.domainFile.uri"
				page="3" depends="mask">
				<msg name="mask" key="file.uri.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
		</form>
		<form name="/nanomaterialEntity">
			<field property="nanomaterialEntity.type" page="1" depends="required, mask">
				<arg position="0" key="nanomaterialEntityType" bundle="sample" />
				<msg name="mask" key="nanomaterialEntityType.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.biopolymer.name" page="1"
				depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.biopolymer.name"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((nanomaterialEntity.type!='biopolymer') or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.biopolymer.type" page="1"
				depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.biopolymer.type"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((nanomaterialEntity.type!='biopolymer') or
						(*this*!=null))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.liposome.polymerName" page="1"
				depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.liposome.polymerName"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) or
						(nanomaterialEntity.isPolymerized !=
						"true")) or
						(nanomaterialEntity.type != "liposome"))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.emulsion.polymerName" page="1"
				depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.emulsion.polymerName"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) or
						(nanomaterialEntity.isPolymerized !=
						"true")) or
						(nanomaterialEntity.type != "emulsion"))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.polymer.crossLinkDegree"
				page="1" depends="validwhen">
				<arg position="0" key="nanomaterialEntityForm.polymer.crossLinkDegree"
					bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((nanomaterialEntity.type!='polymer') or
						((nanomaterialEntity.polymer.crossLinkDegree==0) or
						(*this*!=null)))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theComposingElement.domain.type"
				page="2" depends="validwhen, mask">
				<arg position="0" key="composingElement.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((dispatch!='saveComposingElement') and
						(dispatch!='removeComposingElement')) or
						(*this*!=null))
					</var-value>
				</var>
				<msg name="mask" key="composingElement.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theComposingElement.domain.name"
				page="2" depends="validwhen, mask">
				<arg position="0" key="composingElement.chemicalName" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((dispatch!='saveComposingElement') and
						(dispatch!='removeComposingElement')) or
						(*this*!=null))
					</var-value>
				</var>
				<msg name="mask" key="composingElement.chemicalName.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theComposingElement.domain.pubChemId"
				page="2" depends="mask">
				<msg name="mask" key="composingElement.pubChemId.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${numeric}</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theComposingElement.domain.value"
				page="2" depends="mask">
				<msg name="mask" key="composingElement.value.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${number}</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theComposingElement.domain.valueUnit"
				page="2" depends="mask">
				<msg name="mask" key="composingElement.valueUnit.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${unit}</var-value>
				</var>
			</field>
			<field
				property="nanomaterialEntity.theComposingElement.domain.molecularFormulaType"
				page="2" depends="mask">
				<msg name="mask" key="composingElement.molecularFormulaType.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>			
			<field property="nanomaterialEntity.theFile.uploadedFile"
				page="3" depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((nanomaterialEntity.theFile.domainFile.uri!=null)
						or
						((*this*!=null) and
						(nanomaterialEntity.theFile.domainFile.uriExternal=="false")))
						or
						(nanomaterialEntity.theFile.domainFile.uriExternal=="true"))
					</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theFile.externalUrl"
				page="3" depends="validwhen, mask">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) and
						(nanomaterialEntity.theFile.domainFile.uriExternal=="true")) or
						(nanomaterialEntity.theFile.domainFile.uriExternal=="false"))
					</var-value>
				</var>
				<msg name="mask" key="externalUrl.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${url}</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theFile.domainFile.type"
				page="3" depends="required, mask">
				<arg position="0" key="file.type" bundle="sample" />
				<msg name="mask" key="file.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theFile.domainFile.title"
				page="3" depends="required, mask">
				<arg position="0" key="file.title" bundle="sample" />
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="nanomaterialEntity.theFile.domainFile.uri"
				page="3" depends="mask">
				<msg name="mask" key="file.uri.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>			
		</form>
		<form name="/functionalizingEntity">
			<field property="functionalizingEntity.type" page="1"
				depends="required, mask">
				<arg position="0" key="functionalizingEntity.type" bundle="sample" />
				<msg name="mask" key="functionalizingEntity.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.name" page="1"
				depends="required, mask">
				<arg position="0" key="functionalizingEntity.name" bundle="sample" />
				<msg name="mask" key="functionalizingEntity.name.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.domainEntity.pubChemId" page="1"
				depends="mask">
				<msg name="mask" key="functionalizingEntity.pubChemId.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${numeric}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.value" page="1" depends="mask">
				<msg name="mask" key="functionalizingEntity.value.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${number}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.valueUnit" page="1"
				depends="mask">
				<msg name="mask" key="functionalizingEntity.valueUnit.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${unit}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.molecularFormulaType"
				page="1" depends="mask">
				<msg name="mask" key="functionalizingEntity.molecularFormulaType.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.activationMethod.type"
				page="1" depends="mask">
				<msg name="mask" key="functionalizingEntity.activationMethod.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.activationMethod.activationEffect"
				page="1" depends="mask">
				<msg name="mask"
					key="functionalizingEntity.activationMethod.activationEffect.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFunction.type" page="2"
				depends="validwhen, mask">
				<arg position="0" key="function.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((dispatch!='saveFunction') and
						(dispatch!='removeFunction')) or
						(*this*!=null))
					</var-value>
				</var>
				<msg name="mask" key="function.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFunction.imagingFunction.modality"
				page="2" depends="mask">
				<msg name="mask" key="imagingFunction.modality.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFile.uploadedFile"
				page="3" depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((functionalizingEntity.theFile.domainFile.uri!=null)
						or
						((*this*!=null) and
						(functionalizingEntity.theFile.domainFile.uriExternal=="false")))
						or
						(functionalizingEntity.theFile.domainFile.uriExternal=="true"))
					</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFile.externalUrl"
				page="3" depends="validwhen, mask">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) and
						(functionalizingEntity.theFile.domainFile.uriExternal=="true")) or
						(functionalizingEntity.theFile.domainFile.uriExternal=="false"))
					</var-value>
				</var>
				<msg name="mask" key="externalUrl.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${url}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFile.domainFile.type"
				page="3" depends="required, mask">
				<arg position="0" key="file.type" bundle="sample" />
				<msg name="mask" key="file.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFile.domainFile.title"
				page="3" depends="required, mask">
				<arg position="0" key="file.title" bundle="sample" />
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="functionalizingEntity.theFile.domainFile.uri"
				page="3" depends="mask">
				<msg name="mask" key="file.uri.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
		</form>
		<form name="/compositionFile">
			<field property="comp.theFile.uploadedFile" page="1" depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((comp.theFile.domainFile.uri!=null) or
						((*this*!=null)
						and
						(comp.theFile.domainFile.uriExternal=="false"))) or
						(comp.theFile.domainFile.uriExternal=="true"))
					</var-value>
				</var>
			</field>
			<field property="comp.theFile.externalUrl" page="1"
				depends="validwhen, mask">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) and
						(comp.theFile.domainFile.uriExternal=="true")) or
						(comp.theFile.domainFile.uriExternal=="false"))
					</var-value>
				</var>
				<msg name="mask" key="externalUrl.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${url}</var-value>
				</var>
			</field>
			<field property="comp.theFile.domainFile.title" page="1"
				depends="required,mask">
				<arg position="0" key="file.title" bundle="sample" />
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="comp.theFile.domainFile.type" page="1"
				depends="required, mask">
				<arg position="0" key="file.type" bundle="sample" />
				<msg name="mask" key="file.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="comp.theFile.domainFile.uri"
				page="1" depends="mask">
				<msg name="mask" key="file.uri.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
		</form>
		<form name="characterizationForm">
			<!-- 1.Mandatory properties: Char Type and Char Name -->
			<field property="achar.characterizationType" page="1"
				depends="validwhen, mask">
				<arg position="0" key="achar.characterizationType" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((*this* != null) or (dispatch == "addFile"))
					</var-value>
				</var>
				<msg name="mask" key="achar.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.characterizationName" page="1"
				depends="validwhen, mask">
				<arg position="0" key="achar.characterizationName" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((*this* != null) or (dispatch == "addFile"))
					</var-value>
				</var>
				<msg name="mask" key="achar.name.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.assayType" page="1" depends="mask">
				<msg name="mask" key="achar.assayType.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.dateString" page="1" depends="date">
				<arg position="0" key="achar.date" bundle="sample" />
				<var>
					<var-name>datePattern</var-name>
					<var-value>MM/dd/yyyy</var-value>
				</var>
			</field>
			<!--
				1.Mandatory properties: Shape Type required if Char Name is Shape
			-->
			<field property="achar.shape.type" page="1" depends="validwhen">
				<arg position="0" key="shape.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						(((*this*!=null) or (dispatch == "addFile"))
						or
						(achar.characterizationName != 'Shape'))
					</var-value>
				</var>
			</field>
			<field property="achar.protocolBean.fileBean.domainFile.uri"
				page="1" depends="mask">
				<msg name="mask" key="file.uri.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<!-- 2.Optional properties: Technique and Instrument form -->
			<field property="achar.theExperimentConfig.domain.technique.type"
				page="2" depends="validwhen, mask">
				<arg position="0" key="achar.technique.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((*this*!=null)
						or
						((dispatch!='saveExperimentConfig')
						and
						(dispatch!='deleteExperimentConfig')))
					</var-value>
				</var>
				<msg name="mask" key="achar.technique.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.theExperimentConfig.domain.technique.abbreviation"
				page="1" depends="mask">
				<msg name="mask" key="achar.technique.abbreviation.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.theInstrument.manufacturer" page="1"
				depends="mask">
				<msg name="mask" key="achar.instrument.manufacturer.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.theInstrument.modelName" page="1"
				depends="mask">
				<msg name="mask" key="achar.instrument.modelName.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.theInstrument.type" page="1" depends="mask">
				<msg name="mask" key="achar.instrument.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<!-- 3.Optional properties: Finding - Upload File form -->
			<field property="achar.theFinding.theFile.uploadedFile" page="3"
				depends="validwhen">
				<arg position="0" key="uploadedFile" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((dispatch!="addFile") or (
						((achar.theFinding.theFile.domainFile.uri!=null) or
						((*this*!=null) and
						(achar.theFinding.theFile.domainFile.uriExternal=="false")))
						or
						(achar.theFinding.theFile.domainFile.uriExternal=="true")))
					</var-value>
				</var>
			</field>
			<field property="achar.theFinding.theFile.externalUrl" page="3"
				depends="validwhen, mask">
				<arg position="0" key="externalUrl" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((dispatch!="addFile") or (
						((*this*!=null) and
						(achar.theFinding.theFile.domainFile.uriExternal=="true")) or
						(achar.theFinding.theFile.domainFile.uriExternal=="false")))
					</var-value>
				</var>
				<msg name="mask" key="externalUrl.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${url}</var-value>
				</var>
			</field>
			<field property="achar.theFinding.theFile.domainFile.type"
				page="3" depends="validwhen, mask">
				<arg position="0" key="file.type" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((dispatch!="addFile") or (*this*!=null))
					</var-value>
				</var>
				<msg name="mask" key="file.type.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.theFinding.theFile.domainFile.title"
				page="3" depends="validwhen, mask">
				<arg position="0" key="file.title" bundle="sample" />
				<var>
					<var-name>test</var-name>
					<var-value>
						((dispatch!="addFile") or (*this*!=null))
					</var-value>
				</var>
				<msg name="mask" key="file.title.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${textFieldWhiteList}</var-value>
				</var>
			</field>
			<field property="achar.theFinding.theFile.uri" page="3"
				depends="mask">
				<msg name="mask" key="file.uri.invalid" />
				<var>
					<var-name>mask</var-name>
					<var-value>${url}</var-value>
				</var>
			</field>
		</form>
	</formset>
</form-validation>
